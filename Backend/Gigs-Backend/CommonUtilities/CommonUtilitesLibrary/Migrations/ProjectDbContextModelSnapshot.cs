// <auto-generated />
using System;
using CommonUtilitesLibrary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CommonUtilitesLibrary.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    partial class ProjectDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CommonUtilitesLibrary.Models.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("amount");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("currency_id");

                    b.Property<Guid?>("CurrencyId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GigId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("gig_id");

                    b.Property<Guid?>("GigId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("payment_status");

                    b.Property<Guid>("PricingTierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("pricing_tier_id");

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("scheduled_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<Guid>("TimeSlotId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("time_slot_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CurrencyId1");

                    b.HasIndex("GigId");

                    b.HasIndex("GigId1");

                    b.HasIndex("PricingTierId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("bookings");
                });

            modelBuilder.Entity("CommonUtilitesLibrary.Models.Calendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("CalendarLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("calendar_link");

                    b.Property<string>("ExternalService")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("external_service");

                    b.Property<DateTime>("SyncedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("synced_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("calendars");
                });

            modelBuilder.Entity("CommonUtilitesLibrary.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("CommonUtilitesLibrary.Models.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("currencies");
                });

            modelBuilder.Entity("CommonUtilitesLibrary.Models.Gig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Availability")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("availability");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("currency_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<Guid>("FreelancerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("freelancer_id");

                    b.Property<string>("Gallery")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("gallery");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("FreelancerId");

                    b.ToTable("gigs");
                });

            modelBuilder.Entity("CommonUtilitesLibrary.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("GigId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("gig_id");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message_content");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("sender_id");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("sent_at");

                    b.HasKey("Id");

                    b.HasIndex("GigId");

                    b.HasIndex("SenderId");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("CommonUtilitesLibrary.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("amount");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("booking_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("currency_id");

                    b.Property<string>("PaymentGateway")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("payment_gateway");

                    b.Property<string>("PaymentReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("payment_reference");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("payments");
                });

            modelBuilder.Entity("CommonUtilitesLibrary.Models.PricingTier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("DeliveryTime")
                        .HasColumnType("int")
                        .HasColumnName("delivery_time");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<Guid>("GigId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("gig_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<string>("TierName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tier_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("GigId");

                    b.ToTable("pricing_tiers");
                });

            modelBuilder.Entity("CommonUtilitesLibrary.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("GigId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("gig_id");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<string>("ReviewText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("review_text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("GigId");

                    b.ToTable("reviews");
                });

            modelBuilder.Entity("CommonUtilitesLibrary.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("role_code");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("role_description");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("CommonUtilitesLibrary.Models.TimeSlotTier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int")
                        .HasColumnName("duration_minutes");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("end_time");

                    b.Property<Guid>("GigId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("gig_id");

                    b.Property<string>("SlotName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("slot_name");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("GigId");

                    b.ToTable("time_slot_tiers");
                });

            modelBuilder.Entity("CommonUtilitesLibrary.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bio");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("profile_picture");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("CommonUtilitesLibrary.Models.Booking", b =>
                {
                    b.HasOne("CommonUtilitesLibrary.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommonUtilitesLibrary.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommonUtilitesLibrary.Models.Currency", null)
                        .WithMany("Bookings")
                        .HasForeignKey("CurrencyId1");

                    b.HasOne("CommonUtilitesLibrary.Models.Gig", "Gig")
                        .WithMany()
                        .HasForeignKey("GigId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommonUtilitesLibrary.Models.Gig", null)
                        .WithMany("Bookings")
                        .HasForeignKey("GigId1");

                    b.HasOne("CommonUtilitesLibrary.Models.PricingTier", "PricingTier")
                        .WithMany()
                        .HasForeignKey("PricingTierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommonUtilitesLibrary.Models.TimeSlotTier", "TimeSlot")
                        .WithMany()
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Currency");

                    b.Navigation("Gig");

                    b.Navigation("PricingTier");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("CommonUtilitesLibrary.Models.Calendar", b =>
                {
                    b.HasOne("CommonUtilitesLibrary.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommonUtilitesLibrary.Models.Gig", b =>
                {
                    b.HasOne("CommonUtilitesLibrary.Models.Category", "Category")
                        .WithMany("Gigs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommonUtilitesLibrary.Models.Currency", "Currency")
                        .WithMany("Gigs")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommonUtilitesLibrary.Models.User", "Freelancer")
                        .WithMany()
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Currency");

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("CommonUtilitesLibrary.Models.Message", b =>
                {
                    b.HasOne("CommonUtilitesLibrary.Models.Gig", "Gig")
                        .WithMany("Messages")
                        .HasForeignKey("GigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommonUtilitesLibrary.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gig");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("CommonUtilitesLibrary.Models.Payment", b =>
                {
                    b.HasOne("CommonUtilitesLibrary.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommonUtilitesLibrary.Models.Currency", "Currency")
                        .WithMany("Payments")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("CommonUtilitesLibrary.Models.PricingTier", b =>
                {
                    b.HasOne("CommonUtilitesLibrary.Models.Gig", "Gig")
                        .WithMany("PricingTiers")
                        .HasForeignKey("GigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gig");
                });

            modelBuilder.Entity("CommonUtilitesLibrary.Models.Review", b =>
                {
                    b.HasOne("CommonUtilitesLibrary.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommonUtilitesLibrary.Models.Gig", "Gig")
                        .WithMany("Reviews")
                        .HasForeignKey("GigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Gig");
                });

            modelBuilder.Entity("CommonUtilitesLibrary.Models.TimeSlotTier", b =>
                {
                    b.HasOne("CommonUtilitesLibrary.Models.Gig", "Gig")
                        .WithMany("TimeSlotTiers")
                        .HasForeignKey("GigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gig");
                });

            modelBuilder.Entity("CommonUtilitesLibrary.Models.User", b =>
                {
                    b.HasOne("CommonUtilitesLibrary.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CommonUtilitesLibrary.Models.Category", b =>
                {
                    b.Navigation("Gigs");
                });

            modelBuilder.Entity("CommonUtilitesLibrary.Models.Currency", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Gigs");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("CommonUtilitesLibrary.Models.Gig", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Messages");

                    b.Navigation("PricingTiers");

                    b.Navigation("Reviews");

                    b.Navigation("TimeSlotTiers");
                });

            modelBuilder.Entity("CommonUtilitesLibrary.Models.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
